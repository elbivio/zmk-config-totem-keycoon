//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <5 6>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <4 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
                  &kp Q  &kp W  &kp F           &kp P             &kp B                 &kp J                &kp L              &kp U                &kp Y    &kp SEMI
                  &kp A  &kp R  &kp S           &kp T             &kp G                 &kp M                &kp N              &kp E                &kp I    &kp O
&mt LCTRL ESCAPE  &kp Z  &kp X  &mt LEFT_ALT C  &mt LEFT_SHIFT D  &mt LEFT_CONTROL V    &mt RIGHT_CONTROL K  &mt RIGHT_SHIFT H  &mt RIGHT_ALT COMMA  &kp DOT  &kp FSLH  &kp APOS
                                &kp LGUI        &mo 2             &lt 1 ENTER           &kp SPACE            &kp RIGHT_SHIFT    &kp RIGHT_ALT
            >;
        };

        nav_num {
            bindings = <
                   &kp LA(BACKSPACE)   &kp BACKSPACE  &kp UP     &kp DELETE     &kp LA(DELETE)        &kp PLUS   &kp N7           &kp NUMBER_8  &kp NUMBER_9  &kp ASTERISK
                   &kp LA(LEFT_ARROW)  &kp LEFT       &kp DOWN   &kp RIGHT      &kp LA(RIGHT)         &kp MINUS  &kp NUMBER_4     &kp N5        &kp NUMBER_6  &kp SLASH
&kp LG(BACKSPACE)  &kp LG(UP_ARROW)    &kp LG(LEFT)   &kp ENTER  &kp LG(RIGHT)  &kp LG(DOWN_ARROW)    &kp ENTER  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD    &kp EQUAL
                                                      &trans     &trans         &trans                &kp EQUAL  &kp RIGHT_SHIFT  &kp PERCENT
            >;
        };

        sym_func {
            bindings = <
           &kp LA(TAB)    &kp LEFT_BRACE        &kp RIGHT_BRACE        &none             &none             &kp F1   &kp F2           &kp F3   &kp F4   &kp F5
           &kp TAB        &kp LBKT              &kp RBKT               &kp ENTER         &kp BSLH          &kp F6   &kp F7           &kp F8   &kp F9   &kp F10
&kp GRAVE  &kp LESS_THAN  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GREATER_THAN  &kp UNDERSCORE    &kp F11  &kp F12          &kp F13  &kp F14  &kp F15  &kp F16
                                                &trans                 &trans            &trans            &none    &kp RIGHT_SHIFT  &none
            >;
        };

        device {
            bindings = <
       &none       &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none             &bt BT_SEL 0    &none      &none           &none           &none            &msc SCRL_UP
       &kp K_MUTE  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp C_PLAY_PAUSE  &bt BT_SEL 1    &none      &mmv MOVE_LEFT  &mmv MOVE_UP    &mmv MOVE_RIGHT  &msc SCRL_DOWN
&none  &none       &none                 &none                 &none             &bt BT_CLR      &none      &none           &mmv MOVE_DOWN  &none            &none           &none
                                         &none                 &none             &none           &mkp LCLK  &mkp RCLK       &mkp MCLK
            >;
        };

        extra1 { status = "reserved"; };

        extra2 { status = "reserved"; };

        extra3 { status = "reserved"; };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        device {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
